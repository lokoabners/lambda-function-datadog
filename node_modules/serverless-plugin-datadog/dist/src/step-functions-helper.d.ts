import Serverless from "serverless";
export interface GeneralResource {
    Type: string;
    Properties?: {
        DefinitionString?: string | {
            "Fn::Sub": any[];
        };
    };
}
export interface StateMachineDefinition {
    States: {
        [key: string]: StateMachineStep;
    };
}
export type PayloadObject = {
    "Execution.$"?: any;
    Execution?: any;
    "State.$"?: any;
    State?: any;
    "StateMachine.$"?: any;
    StateMachine?: any;
};
export type StepFunctionInput = {
    "CONTEXT.$"?: string;
    CONTEXT?: string;
    [key: string]: unknown;
};
export interface StateMachineStep {
    Resource?: string;
    Parameters?: {
        FunctionName?: string;
        "Payload.$"?: string;
        Payload?: string | PayloadObject;
        Input?: string | StepFunctionInput;
    };
    Next?: string;
    End?: boolean;
}
export declare function isLambdaApiStep(resource: string | undefined): boolean;
export declare function isStepFunctionInvocation(resource: string | undefined): boolean;
export declare function updateDefinitionString(definitionString: string | {
    "Fn::Sub": (string | object)[];
}, serverless: Serverless, stateMachineName: string): string | {
    "Fn::Sub": (string | object)[];
};
export declare function updateDefinitionForStepFunctionInvocationStep(stepName: string, step: StateMachineStep, serverless: Serverless, stateMachineName: string): boolean;
export declare function inspectAndRecommendStepFunctionsInstrumentation(serverless: Serverless): void;
//# sourceMappingURL=step-functions-helper.d.ts.map