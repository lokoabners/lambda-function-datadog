"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectFormat = exports.validateCoverageReport = void 0;
const fs_1 = __importDefault(require("fs"));
const fast_xml_parser_1 = require("fast-xml-parser");
const upath_1 = __importDefault(require("upath"));
const renderer_1 = require("./renderer");
const ROOT_TAG_REGEX = /<([^?!\s/>]+)/;
const validateCoverageReport = (filePath, format) => {
    if (format === 'jacoco') {
        const xmlFileContentString = String(fs_1.default.readFileSync(filePath));
        const validationOutput = fast_xml_parser_1.XMLValidator.validate(xmlFileContentString);
        if (validationOutput !== true) {
            return validationOutput.err.msg;
        }
        // Check that the root element is 'report' and that the report contains sourcefile tags
        const rootTagMatch = xmlFileContentString.match(ROOT_TAG_REGEX);
        if (!rootTagMatch || rootTagMatch[1] !== 'report') {
            return 'Invalid Jacoco report: root element must be <report>';
        }
        if (!xmlFileContentString.includes('<sourcefile')) {
            return 'Invalid Jacoco report: missing <sourcefile> tags';
        }
    }
    return undefined;
};
exports.validateCoverageReport = validateCoverageReport;
const detectFormat = (filePath) => {
    if (!fs_1.default.existsSync(filePath)) {
        return undefined;
    }
    if (upath_1.default.extname(filePath).toLowerCase() !== '.xml') {
        return undefined;
    }
    let fd;
    try {
        fd = fs_1.default.openSync(filePath, 'r');
        const buffer = Buffer.alloc(1024);
        fs_1.default.readSync(fd, buffer, 0, 1024, 0);
        const data = buffer.toString('utf8');
        if (data.includes('<!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN"')) {
            return 'jacoco';
        }
    }
    catch (error) {
        (0, renderer_1.renderFileReadError)(filePath, error);
    }
    finally {
        if (fd !== undefined) {
            fs_1.default.closeSync(fd);
        }
    }
    return undefined;
};
exports.detectFormat = detectFormat;
//# sourceMappingURL=utils.js.map