"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderCommandInfo = exports.renderUpload = exports.renderDryRunUpload = exports.renderSuccessfulUploadCommand = exports.renderSuccessfulUpload = exports.renderRetriedUpload = exports.renderFailedUpload = exports.renderInvalidFile = exports.renderFileReadError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const upath_1 = __importDefault(require("upath"));
const ICONS = {
    FAILED: '❌',
    SUCCESS: '✅',
    WARNING: '⚠️',
};
const renderFileReadError = (filePath, errorMessage) => {
    const reportPath = `[${chalk_1.default.bold.dim(filePath)}]`;
    return chalk_1.default.red(`${ICONS.FAILED} Error while reading report file ${reportPath}: ${errorMessage}\n`);
};
exports.renderFileReadError = renderFileReadError;
const renderInvalidFile = (filePath, errorMessage) => {
    const reportPath = `[${chalk_1.default.bold.dim(filePath)}]`;
    return chalk_1.default.red(`${ICONS.FAILED} Invalid coverage report file ${reportPath}: ${errorMessage}\n`);
};
exports.renderInvalidFile = renderInvalidFile;
const renderFailedUpload = (payload, errorMessage) => {
    const payloadDetails = `${chalk_1.default.bold.dim(payload.paths)}`;
    return chalk_1.default.red(`${ICONS.FAILED} Upload failed for ${payloadDetails}: ${errorMessage}\n`);
};
exports.renderFailedUpload = renderFailedUpload;
const renderRetriedUpload = (payload, errorMessage, attempt) => {
    const payloadDetails = `${chalk_1.default.bold.dim(payload.paths)}`;
    return chalk_1.default.yellow(`[attempt ${attempt}] Retrying coverage report upload ${payloadDetails}: ${errorMessage}\n`);
};
exports.renderRetriedUpload = renderRetriedUpload;
const renderSuccessfulUpload = (dryRun, fileCount, duration) => {
    return chalk_1.default.green(`${dryRun ? '[DRYRUN] ' : ''}${ICONS.SUCCESS} Uploaded ${fileCount} files in ${duration} seconds.`);
};
exports.renderSuccessfulUpload = renderSuccessfulUpload;
// TODO add some Datadog links to the output
const renderSuccessfulUploadCommand = () => {
    let fullStr = '';
    fullStr += chalk_1.default.green('=================================================================================================\n');
    fullStr += chalk_1.default.green('* Code coverage report(s) upload successful\n');
    fullStr += chalk_1.default.green('=================================================================================================\n');
    return fullStr;
};
exports.renderSuccessfulUploadCommand = renderSuccessfulUploadCommand;
const renderDryRunUpload = (payload) => `[DRYRUN] ${(0, exports.renderUpload)(payload)}`;
exports.renderDryRunUpload = renderDryRunUpload;
const renderUpload = (payload) => {
    if (payload.paths && payload.paths.length) {
        return `Uploading code coverage report file(s) in ${payload.paths}`;
    }
    else {
        return 'No code coverage report paths, doing nothing';
    }
};
exports.renderUpload = renderUpload;
const renderCommandInfo = (basePaths, dryRun) => {
    let fullStr = '';
    if (dryRun) {
        fullStr += chalk_1.default.yellow(`${ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD COVERAGE REPORTS\n`);
    }
    fullStr += chalk_1.default.green(`${new Date().toLocaleString()} - Starting upload. \n`);
    if (!!basePaths.length) {
        if (basePaths.length === 1 && !!upath_1.default.extname(basePaths[0])) {
            fullStr += chalk_1.default.green(`Will upload code coverage report file ${basePaths[0]}`);
        }
        else {
            fullStr += chalk_1.default.green(`Will look for code coverage report files in ${basePaths.join(', ')}`);
        }
    }
    return fullStr;
};
exports.renderCommandInfo = renderCommandInfo;
//# sourceMappingURL=renderer.js.map